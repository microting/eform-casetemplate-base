// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microting.eFormCaseTemplateBase.Infrastructure.Data;

namespace Microting.eFormCaseTemplateBase.Migrations
{
    [DbContext(typeof(CaseTemplatePnDbContext))]
    [Migration("20190919090728_AddingSdkCaseId")]
    partial class AddingSdkCaseId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            string autoIDGenStrategy = "SqlServer:ValueGenerationStrategy";
            object autoIDGenStrategyValue = MySqlValueGenerationStrategy.IdentityColumn;
            if (DbConfig.IsMySQL)
            {
                autoIDGenStrategy = "MySql:ValueGenerationStrategy";
                autoIDGenStrategyValue = MySqlValueGenerationStrategy.IdentityColumn;
            }
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

            modelBuilder.Entity("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginConfigurationValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("Value");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PluginConfigurationValues");
                });

            modelBuilder.Entity("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginConfigurationValueVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("Value");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PluginConfigurationValueVersions");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("CaseTemplateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime?>("DoneAt");

                    b.Property<bool>("FetchedByTablet");

                    b.Property<DateTime>("FetchedByTabletAt");

                    b.Property<bool>("ReceiptRetrievedFromUser");

                    b.Property<DateTime>("ReceiptRetrievedFromUserAt");

                    b.Property<int?>("SiteId");

                    b.Property<int?>("Status");

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.Property<int?>("UnitId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<int?>("WorkerId");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.Property<int?>("eFormId");

                    b.HasKey("Id");

                    b.HasIndex("CaseTemplateId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<bool>("AlwaysShow");

                    b.Property<bool>("Approvable");

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("DescriptionFolderId");

                    b.Property<DateTime>("EndAt");

                    b.Property<string>("PdfTitle");

                    b.Property<bool>("RetractIfApproved");

                    b.Property<DateTime>("StartAt");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CaseTemplates");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("CaseTemplateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("SdkCaseId");

                    b.Property<int>("SdkSiteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CaseTemplateSites");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateSiteTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("CaseTemplateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("SdkSiteTagId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CaseTemplateSiteTags");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateSiteTagVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("CaseTemplateId");

                    b.Property<int>("CaseTemplateSiteTagId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("SdkSiteTagId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CaseTemplateSiteTagVersions");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateSiteVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("CaseTemplateId");

                    b.Property<int>("CaseTemplateSiteId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("SdkCaseId");

                    b.Property<int>("SdkSiteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CaseTemplateSiteVersions");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateUploadedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<bool>("Approvable");

                    b.Property<int>("CaseTemplateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<bool>("RetractIfApproved");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("UploadedDataId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CaseTemplateId");

                    b.HasIndex("UploadedDataId");

                    b.ToTable("CaseTemplateUploadedDatas");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateUploadedDataVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<bool>("Approvable");

                    b.Property<int>("CaseTemplateId");

                    b.Property<int>("CaseTemplateUploadedDataId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<bool>("RetractIfApproved");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("UploadedDataId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CaseTemplateId");

                    b.HasIndex("UploadedDataId");

                    b.ToTable("CaseTemplateUploadedDataVersions");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<bool>("AlwaysShow");

                    b.Property<bool>("Approvable");

                    b.Property<string>("Body");

                    b.Property<int>("CaseTemplateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("DescriptionFolderId");

                    b.Property<DateTime>("EndAt");

                    b.Property<string>("PdfTitle");

                    b.Property<bool>("RetractIfApproved");

                    b.Property<DateTime>("StartAt");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CaseTemplateVersions");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("CaseId");

                    b.Property<int>("CaseTemplateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime?>("DoneAt");

                    b.Property<bool>("FetchedByTablet");

                    b.Property<DateTime>("FetchedByTabletAt");

                    b.Property<bool>("ReceiptRetrievedFromUser");

                    b.Property<DateTime>("ReceiptRetrievedFromUserAt");

                    b.Property<int?>("SiteId");

                    b.Property<int?>("Status");

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.Property<int?>("UnitId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<int?>("WorkerId");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.Property<int?>("eFormId");

                    b.HasKey("Id");

                    b.HasIndex("CaseTemplateId");

                    b.ToTable("CaseVersions");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.DescriptionFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<int>("SdkFolderId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DescriptionFolders");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.DescriptionFolderVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<int>("DescriptionFolderId");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<int>("SdkFolderId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("DescriptionFolderVersions");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.UploadedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<string>("Checksum")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CurrentFile")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Extension")
                        .HasMaxLength(255);

                    b.Property<string>("FileLocation")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .HasMaxLength(255);

                    b.Property<short?>("Local");

                    b.Property<string>("OriginalFileName");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UploaderType")
                        .HasMaxLength(255);

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("UploadedDatas");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.UploadedDataVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<string>("Checksum")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CurrentFile")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Extension")
                        .HasMaxLength(255);

                    b.Property<string>("FileLocation")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .HasMaxLength(255);

                    b.Property<short?>("Local");

                    b.Property<string>("OriginalFileName");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<int>("UploadedDataId");

                    b.Property<string>("UploaderType")
                        .HasMaxLength(255);

                    b.Property<int>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("UploadedDataVersions");
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.Case", b =>
                {
                    b.HasOne("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplate", "CaseTemplate")
                        .WithMany()
                        .HasForeignKey("CaseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateUploadedData", b =>
                {
                    b.HasOne("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplate", "CaseTemplate")
                        .WithMany("CaseTemplateUploadedDatas")
                        .HasForeignKey("CaseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.UploadedData", "UploadedData")
                        .WithMany()
                        .HasForeignKey("UploadedDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplateUploadedDataVersion", b =>
                {
                    b.HasOne("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplate", "CaseTemplate")
                        .WithMany()
                        .HasForeignKey("CaseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.UploadedData", "UploadedData")
                        .WithMany()
                        .HasForeignKey("UploadedDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseVersion", b =>
                {
                    b.HasOne("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.CaseTemplate", "CaseTemplate")
                        .WithMany()
                        .HasForeignKey("CaseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.DescriptionFolder", b =>
                {
                    b.HasOne("Microting.eFormCaseTemplateBase.Infrastructure.Data.Entities.DescriptionFolder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
